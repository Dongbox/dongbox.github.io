[{"id":"9a515d5665a08874b409b4ff5ca7a5ad","title":"我的Hexo开发指南","content":"简介作为一个Hexo小白，现在我想要拥有一个Hexo的Aurora主题的博客网站，同时我还有一个域名（dongbox.space），我想通过这个域名访问到我的Hexo静态资源，但我没有服务器，所以我打算直接部署在pages服务上，我选择了Github Pages，整个部署过程会分为三部分：\n\n本地运行Hexo+Aurora主题\n\n将Hexo静态文件部署到Github Pages中，配置CloudFlare CDN\n\nHexo优化\n\n\n1. 本地运行Hexo+Aurora主题一、配置基本环境$ npm install hexo-cli -g\n$ hexo init blog\n$ cd blog\n$ npm install\n$ npm install hexo-theme-aurora --save\n$ npm install hexo-deployer-git -save\n\n二、根据文档修改相应配置Aurora官方文档地址\n$ cd blog\n$ cp ./node_modules/hexo-theme-aurora/_config.yml ./_config.aurora.yml\n\n打开`_config.yml`文件开始修改配置\n\nStep 1：修改permalink为/post/:title.html# URL\n## Set your site url here. For example, if you use GitHub Page, set url as 'https://username.github.io/project'\nurl: https://tridiamond.tech\npermalink: /post/:title.html\npermalink_defaults:\npretty_urls:\n  trailing_index: true # Set to false to remove trailing 'index.html' from permalinks\n  trailing_html: true # Set to false to remove trailing '.html' from permalinks\n\nStep 2：修改highlight为false，prismjs为truehighlight:\n  enable: false\n  line_number: true\n  auto_detect: false\n  tab_replace: ''\n  wrap: true\n  hljs: false\nprismjs:\n  enable: true\n  preprocess: true\n  line_number: true\n  tab_replace: ''\n\nStep 3： 新建一个关于页面$ hexo new page about\n\nStep 4: 生成资源以及检测能否正常部署$ hexo clean\n$ hexo g\n$ hexo server\n\n参考文章\nHexo\nTheme | Hexo Aurora (tridiamond.tech)\n\n2. 将Hexo静态文件部署到Github Pages中，配置CloudFlare CDN一、将Hexo静态文件部署到Github Pages中\n创建一个名为dongbox.github.io的公共仓库\n\n链接本地Hexo项目到github仓库\n# 进入项目目录，此处更换为你的Hexo项目名称\ncd blog\n# 实例化本地仓库\ngit init\n# 链接仓库，此处更换为你的仓库地址\ngit remote add origin https://github.com/Dongbox/dongbox.github.io.git\n修改配置文件_config.yml中的远程仓库地址\ndeploy:\ntype: git\nrepo: https://github.com/Dongbox/dongbox.github.io.git\nbranch: main\n发布到Hexo\nhexo clean &amp;&amp; hexo g &amp;&amp; hexo d\n上传源码到远程仓库\n除了静态文件，我们还要上传Hexo源码文件。\n# 创建一个新的分支hexo\ngit checkout -b hexo\n# 添加文件到本地仓库\ngit add .\n# 提交声明\ngit commit -m '内容'\n# 推送源码到hexo分支\ngit push origin hexo\n\n二、配置CloudFlare CDN参考文章\n基于 Hexo 的 GitHub Pages 配置 CloudFlare CDN_qhh0205的博客-CSDN博客\n\ncloudflare加速博客网站出现“此页面不能正确地重定向”的解决办法_喆旭电科的博客-CSDN博客_如何解决cloudflare\n\n\n","slug":"我的Hexo开发指南","date":"2022-12-09T02:10:33.000Z","categories_index":"","tags_index":"Hexo","author_index":"Dongbo Xie"},{"id":"698d6b72538462fa89b3c934a0b1d2e9","title":"深拷贝浅拷贝","content":"1、Python 深拷贝和浅拷贝概念理解前提知识\nPython 中对象包含的三个基本要素，分别是：id(身份标识)、type(数据类型)和value(值)。\n\nis和 == 都是对对象进行比较判断作用的，但比较判断的内容并不相同：\n\n== 是python标准操作符中的比较操作符，用来比较判断两个对象的 value (值) 是否相等。\n\nis 也被叫做同一性运算符，这个运算符比较判断的是对象间的唯一身份标识，也就是说它判断的是两个对象的 id是否相同。\n\n\n\n\n简介浅拷贝：重新分配一块内存，创建一个新的对象，但里面的元素是对原对象中各个子对象的引用（原地址）。\n深拷贝：重新分配一块内存，创建一个新的对象，并且将原对象中的元素，以递归的方式，通过创建新的子对象拷贝到新对象中（新地址）。因此，新对象和原对象没有任何关联。\n直接的例子1.>>> import copy\n2.>>> a = 1\n3.>>> b = a\n4.>>> c = copy.copy(a)\n5.>>> d = copy.deepcopy(a)\n6.>>> id(a), id(b), id(c), id(d)\n7.(94423772740928, 94423772740928, 94423772740928, 94423772740928) # 无论采用哪种拷贝方式，都是完全相同的内存地址，因为只是增加了一个引用计数\n8.>>> e = 1 # 即使是直接赋值，只要值相同，也是与上面相同的内存地址\n9.>>> id(e)\n10.94423772740928\n11.>>> b = 2\n12.>>> id(b)\n13.94423772740960 # 一旦值不同，内存地址就不同\n\n浅拷贝的产生\n使用数据类型本身的构造器\n对于可变的序列，还可以通过切片操作符 : 来完成浅拷贝（元组、字符串除外）。\nPython 还提供了对应的函数 copy.copy() 函数，适用于任何数据类型\n\n\n\n\n\n\n\n\n\n\n当内层为可变数据类型时，深拷贝后内层外层地址均发生改变。当内层为不可变数据类型时，外层不管是可变还是不可变数据类型，使用深拷贝，都不会改变内层地址，只会在外层为可变数据类型时，改变外层地址。\n使用浅拷贝是只能在外层数据类型为可变数据类型时，才能改变外层地址。而内层地址，无论是否为可变数据类型还是不可变数据类型，使用浅拷贝都不会改变内层数据类型地址。\nRef\nPython中的浅拷贝和深拷贝（一看就懂！！！）_时代&amp;信念的博客-CSDN博客_python 深拷贝 浅拷贝\n\ncloudflare加速博客网站出现“此页面不能正确地重定向”的解决办法_喆旭电科的博客-CSDN博客_如何解决cloudflare\n\n\n","slug":"深拷贝浅拷贝","date":"2022-12-07T13:46:32.000Z","categories_index":"Python面试题","tags_index":"Python","author_index":"Dongbo Xie"},{"id":"b9663f58f18133b35bfe243f3e916a80","title":"Hello World","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.\nQuick StartCreate a new post$ hexo new \"My New Post\"\n\nMore info: Writing\nRun server$ hexo server\n\nMore info: Server\nGenerate static files$ hexo generate\n\nMore info: Generating\nDeploy to remote sites$ hexo deploy\n\nMore info: Deployment\n","slug":"hello-world","date":"2022-12-06T14:29:46.247Z","categories_index":"","tags_index":"","author_index":"Dongbo Xie"}]