[{"id":"f73a8e23e6f6f669cf99c7dba8fa0722","title":"","content":"##当内层为可变数据类型时，深拷贝后内层外层地址均发生改变。当内层为不可变数据类型时，外层不管是可变还是不可变数据类型，使用深拷贝，都不会改变内层地址，只会在外层为可变数据类型时，改变外层地址。\n\ntitle: 深拷贝浅拷贝date: 2022-12-07 21:46:32tags:categories: Python面试题\n\n1、Python 深拷贝和浅拷贝概念理解前提知识\nPython 中对象包含的三个基本要素，分别是：id(身份标识)、type(数据类型)和value(值)。\n\nis和 == 都是对对象进行比较判断作用的，但比较判断的内容并不相同：\n\n== 是python标准操作符中的比较操作符，用来比较判断两个对象的 value (值) 是否相等。\n\nis 也被叫做同一性运算符，这个运算符比较判断的是对象间的唯一身份标识，也就是说它判断的是两个对象的 id是否相同。\n\n\n\n\n简介浅拷贝：重新分配一块内存，创建一个新的对象，但里面的元素是对原对象中各个子对象的引用（原地址）。\n深拷贝：重新分配一块内存，创建一个新的对象，并且将原对象中的元素，以递归的方式，通过创建新的子对象拷贝到新对象中（新地址）。因此，新对象和原对象没有任何关联。\n直接的例子1.>>> import copy\n2.>>> a = 1\n3.>>> b = a\n4.>>> c = copy.copy(a)\n5.>>> d = copy.deepcopy(a)\n6.>>> id(a), id(b), id(c), id(d)\n7.(94423772740928, 94423772740928, 94423772740928, 94423772740928) # 无论采用哪种拷贝方式，都是完全相同的内存地址，因为只是增加了一个引用计数\n8.>>> e = 1 # 即使是直接赋值，只要值相同，也是与上面相同的内存地址\n9.>>> id(e)\n10.94423772740928\n11.>>> b = 2\n12.>>> id(b)\n13.94423772740960 # 一旦值不同，内存地址就不同\n\n浅拷贝的产生\n使用数据类型本身的构造器\n对于可变的序列，还可以通过切片操作符 : 来完成浅拷贝（元组、字符串除外）。\nPython 还提供了对应的函数 copy.copy() 函数，适用于任何数据类型\n\n\n\n\n\n\n\n\n\n\n当内层为可变数据类型时，深拷贝后内层外层地址均发生改变。当内层为不可变数据类型时，外层不管是可变还是不可变数据类型，使用深拷贝，都不会改变内层地址，只会在外层为可变数据类型时，改变外层地址。\n使用浅拷贝是只能在外层数据类型为可变数据类型时，才能改变外层地址。而内层地址，无论是否为可变数据类型还是不可变数据类型，使用浅拷贝都不会改变内层数据类型地址。\nRef\nPython中的浅拷贝和深拷贝（一看就懂！！！）_时代&amp;信念的博客-CSDN博客_python 深拷贝 浅拷贝\n\n","slug":"深拷贝浅拷贝","date":"2022-12-07T13:46:32.960Z","categories_index":"","tags_index":"","author_index":"Dongbox"},{"id":"eb8f578a1396382830625b681dcc878a","title":"参考文章链接合集","content":" \n存放所有参考过的文章链接合集其中应注明了标题名称与相应链接地址\n\nGitHub pages+自定义域名(腾讯云域名)+cloudflare加速 (bbsmax.com)\n\n【保姆级教程】Marktext配合Github图床使用_Eros不想上班的博客-CSDN博客_marktext使用\n\n\n","slug":"参考文章链接合集","date":"2022-12-07T11:02:00.000Z","categories_index":"","tags_index":"Link","author_index":"Dongbox"},{"id":"1fd4709d7fc2fa221b59582164a77ab0","title":"如何部署Hexo到github","content":"过程一、配置基本环境$ npm install hexo-cli -g\n$ hexo init blog\n$ cd blog\n$ npm install\n$ npm install hexo-theme-aurora --save\n$ npm install hexo-deployer-git -save\n\n二、根据文档修改相应配置Aurora官方文档地址\n$ cd blog\n$ cp ./node_modules/hexo-theme-aurora/_config.yml ./_config.aurora.yml\n\n打开`_config.yml`文件开始修改配置\n\nStep 1：修改permalink为/post/:title.html# URL\n## Set your site url here. For example, if you use GitHub Page, set url as 'https://username.github.io/project'\nurl: https://tridiamond.tech\npermalink: /post/:title.html\npermalink_defaults:\npretty_urls:\n  trailing_index: true # Set to false to remove trailing 'index.html' from permalinks\n  trailing_html: true # Set to false to remove trailing '.html' from permalinks\n\nStep 2：修改highlight为false，prismjs为truehighlight:\n  enable: false\n  line_number: true\n  auto_detect: false\n  tab_replace: ''\n  wrap: true\n  hljs: false\nprismjs:\n  enable: true\n  preprocess: true\n  line_number: true\n  tab_replace: ''\n\nStep 3： 新建一个关于页面$ hexo new page about\n\nStep 4: 生成资源以及检测能否正常部署$ hexo clean\n$ hexo g\n$ hexo server\n\n三、新建github仓库首先在 Hexo 的仓库中创建一个新文件：.github/workflows/deploy.yml，文件名可以自己取，但是一定要放在 .github/workflows 目录中，文件的内容如下：\nname: Hexo Deploy\n\non:\n  push:\n    branches:\n      - main\n\njobs:\n  build:\n    runs-on: ubuntu-18.04\n    if: github.event.repository.owner.id == github.event.sender.id\n\n    steps:\n      - name: Checkout source\n        uses: actions/checkout@v2\n        with:\n          ref: master\n\n      - name: Setup Node.js\n        uses: actions/setup-node@v1\n        with:\n          node-version: '18'\n\n      - name: Setup Hexo\n        env:\n          ACTION_DEPLOY_KEY: $&#123;&#123; secrets.HEXO_DEPLOY_KEY &#125;&#125;\n        run: |\n          mkdir -p ~/.ssh/\n          echo \"$ACTION_DEPLOY_KEY\" > ~/.ssh/id_rsa\n          chmod 700 ~/.ssh\n          chmod 600 ~/.ssh/id_rsa\n          ssh-keyscan github.com >> ~/.ssh/known_hosts\n          git config --global user.email \"sfreebobo@163.com\"\n          git config --global user.name \"dongbox\"\n          npm install hexo-cli -g\n          npm install\n\n      - name: Deploy\n        run: |\n          hexo clean\n          hexo deploy\n\n四、Hexo部署$ hexo d\n\n\n\n\n\n\n\n\n\n\n这个会提交代码自动执行Github Actions。\n参考链接\nhttps://zhuanlan.zhihu.com/p/170563000\nhttps://hexo.io/zh-cn/\nhttps://blog.csdn.net/wapchief/article/details/54602515\n\n","slug":"如何部署Hexo到github","date":"2022-12-07T00:15:36.000Z","categories_index":"","tags_index":"Hexo","author_index":"Dongbox"},{"id":"b9663f58f18133b35bfe243f3e916a80","title":"Hello World","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.\nQuick StartCreate a new post$ hexo new \"My New Post\"\n\nMore info: Writing\nRun server$ hexo server\n\nMore info: Server\nGenerate static files$ hexo generate\n\nMore info: Generating\nDeploy to remote sites$ hexo deploy\n\nMore info: Deployment\n","slug":"hello-world","date":"2022-12-06T14:29:46.247Z","categories_index":"","tags_index":"","author_index":"Dongbox"}]