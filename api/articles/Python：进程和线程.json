{"title":"Python：进程和线程","uid":"02a08c5f44cac23b9de92edc205edce8","slug":"Python：进程和线程","date":"2022-12-17T02:26:37.000Z","updated":"2022-12-17T03:03:52.816Z","comments":true,"path":"api/articles/Python：进程和线程.json","keywords":null,"cover":"https://images.unsplash.com/photo-1671154453575-b0cea38bb19a","content":"<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>进程——资源分配的最小单位，线程——程序执行的最小单位</p></blockquote>\n<h3 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h3><ul>\n<li><p><strong>进程（Process）</strong> </p>\n<p>进程的目的就是担当分配系统资源（CPU时间、内存等）的基本单位。</p>\n</li>\n<li><p><strong>线程（thread）</strong> </p>\n<p>线程是进程的一个<strong>执行流，是CPU调度和分派的基本单位，它是比进程更小的能独立运行的基本单位。</strong></p>\n</li>\n</ul>\n<p>进程有独立的地址空间，一个进程崩溃后，在保护模式下不会对其它进程产生影响，而线程只是一个进程中的不同执行路径。线程有自己的堆栈和局部变量，但线程没有单独的地址空间，一个线程死掉就等于整个进程死掉，所以多进程的程序要比多线程的程序健壮，但在进程切换时，耗费资源较大，效率要差一些。但对于一些要求同时进行并且又要共享某些变量的并发操作，只能用线程，不能用进程</p>\n<h4 id=\"进程的状态及转换\"><a href=\"#进程的状态及转换\" class=\"headerlink\" title=\"进程的状态及转换\"></a>进程的状态及转换</h4><p>进程是动态的，是运行在内存中的程序的执行实例。</p>\n<p>进程整个生命周期可以简单划分为三种状态：</p>\n<p><strong>就绪态：</strong><br>进程已经具备执行的一切条件，正在等待分配CPU的处理时间。</p>\n<p><strong>执行态：</strong><br>该进程正在占用CPU运行。</p>\n<p><strong>等待态：</strong><br>进程因不具备某些执行条件而暂时无法继续执行的状态。</p>\n<p><strong>进程的调度进制：</strong><br>时间片轮转，上下文切换<br>多进程不是说一个进程执行完再执行另一个进程，而是交替执行的，一个进程执行一段时间，然后下一个进程在执行一段时间，依次类推，所有进程执行完之后再回到第一个进程初继续执行以此类推</p>\n<p>进程控制块就是用于保存一个进程信息的结构体，又称之为PCB。</p>\n<h4 id=\"线程\"><a href=\"#线程\" class=\"headerlink\" title=\"线程\"></a>线程</h4><p>每个进程都拥有自己的数据段、代码段和堆栈段，这就造成进程在进行创建、切换、撤销操作时，需要较大的系统开销。</p>\n<p>​为了减少系统开销，从进程中演化出了线程。</p>\n<p>​线程存在于进程中，共享进程的资源。</p>\n<p>​线程是进程中的独立控制流，由环境（包括寄存器组和程序计数器）和一系列的执行指令组成。</p>\n<h5 id=\"使用多线程的理由：\"><a href=\"#使用多线程的理由：\" class=\"headerlink\" title=\"使用多线程的理由：\"></a>使用多线程的理由：</h5><ul>\n<li><p><strong>和进程相比，它是一种非常”节俭”的多任务操作方式。</strong></p>\n<p>我们知道，在Linux系统下，启动一个新的进程必须分配给它独立的地址空间，建立众多的数据表来维护它的代码段、堆栈段和数据段，这是一种”昂贵”的多任务工作方式。而运行于一个进程中的多个线程，它们彼此之间使用相同的地址空间，共享大部分数据，启动一个线程所花费的空间远远小于启动一个进程所花费的空间，而且，线程间彼此切换所需的时间也远远小于进程间切换所需要的时间。据统计，总的说来，一个进程的开销大约是一个线程开销的30倍左右，当然，在具体的系统上，这个数据可能会有较大的区别。</p>\n</li>\n<li><p><strong>线程间方便的通信机制。</strong></p>\n<p>对不同进程来说，它们具有独立的数据空间，要进行数据的传递只能通过通信的方式进行，这种方式不仅费时，而且很不方便。线程则不然，由于同一进程下的线程之间共享数据空间，所以一个线程的数据可以直接为其它线程所用，这不仅快捷，而且方便。当然，数据的共享也带来其他一些问题，有的变量不能同时被两个线程所修改，有的子程序中声明为static的数据更有可能给多线程程序带来灾难性的打击，这些正是编写多线程程序时最需要注意的地方。</p>\n</li>\n</ul>\n<h3 id=\"线程和进程的比较\"><a href=\"#线程和进程的比较\" class=\"headerlink\" title=\"线程和进程的比较\"></a>线程和进程的比较</h3><p><strong>调度：</strong></p>\n<p>​线程是CPU调度和分派的基本单位。</p>\n<p><strong>拥有资源：</strong></p>\n<p>​进程是系统中程序执行和资源分配的基本单位。</p>\n<p>​线程自己一般不拥有资源（除了必不可少的程序计数器，一组寄存器和栈），但它可以去访问其所属进程的资源，如进程代码段，数据段以及系统资源（已打开的文件，I/O设备等）。</p>\n<p><strong>系统开销：</strong></p>\n<p>​同一个进程中的多个线程可共享同一地址空间，因此它们之间的同步和通信的实现也变得比较容易。</p>\n<p>​在进程切换时候，涉及到整个当前进程CPU环境的保存以及新被调度运行的进程的CPU环境的设置；而线程切换只需要保存和设置少量寄存器的内容，并不涉及存储器管理方面的操作，从而能更有效地使用系统资源和提高系统的吞吐量。</p>\n<p><strong>并发性：</strong></p>\n<p>​不仅进程间可以并发执行，而且在一个进程中的多个线程之间也可以并发执行。</p>\n<p><strong>总结：</strong></p>\n<p>​一般把线程称之为轻量级的进程。</p>\n<p>​一个进程可以创建多个线程，多个线程共享一个进程的资源。</p>\n<p>​每一个进程创建的时候系统会给其4G虚拟内存，3G用户空间是私有的，所以进程切换时，用户空间也会切换，所以会增加系统开销，而一个进程中的多个线程共享一个进程的资源，所以线程切换时不用切换这些资源，效率会更高。</p>\n<p>​线程的调度机制跟进程是一样的，多个线程来回切换运行。</p>\n<p><strong>使用多线程的目的主要有以下几点：</strong></p>\n<ul>\n<li><p>多任务程序的设计</p>\n<p> 一个程序可能要处理不同应用，要处理多种任务，如果开发不同的进程来处理，系统开销很大，数据共享，程序结构都不方便，这时可使用多线程编程方法。</p>\n</li>\n<li><p>并发程序设计</p>\n<p>​一个任务可能分成不同的步骤去完成，这些不同的步骤之间可能是松散耦合，可能通过线程的互斥，同步并发完成。这样可以为不同的任务步骤建立线程。</p>\n</li>\n<li><p>网络程序设计</p>\n<p>​为提高网络的利用效率，我们可能使用多线程，对每个连接用一个线程去处理。</p>\n</li>\n<li><p>数据共享</p>\n<p>同一个进程中的不同线程共享进程的数据空间，方便不同线程间的数据共享。</p>\n</li>\n</ul>\n<p><strong>线程与进程的区别和联系?线程是否具有相同的堆栈? dll是否有独立的堆栈?</strong></p>\n<p>进程是死的，只是一些资源的集合，真正的程序执行都是线程来完成的，程序启动的时候操作系统就帮你创建了一个主线程。</p>\n<p>每个线程有自己的堆栈。</p>\n<p>动态链接库DLL中有没有独立的堆栈，这个问题不好回答。因为DLL中的代码是被某些线程所执行，只有线程拥有堆栈，如果DLL中的代码是EXE中的线程所调用，那么这个时候是不是说这个DLL没有自己独立的堆栈？如果DLL中的代码是由DLL自己创建的线程所执行，那么是不是说DLL有独立的堆栈？</p>\n<h3 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h3><ul>\n<li><p><a href=\"https://blog.csdn.net/wangguchao/article/details/109002488\">进程线程（一）——基础知识，什么是进程？什么是线程？_口袋里のInit的博客-CSDN博客_进程 线程</a></p>\n</li>\n<li><p><a href=\"https://blog.csdn.net/weixin_45590051/article/details/116530748\">进程和线程_南 城的博客-CSDN博客_进程和线程</a></p>\n</li>\n<li><p><a href=\"https://www.cnblogs.com/shuopython/p/14944655.html\">Python 线程池 ThreadPoolExecutor(二) - Python零基础入门教程 - 猿说编程 - 博客园 (cnblogs.com)</a></p>\n</li>\n</ul>\n","feature":true,"text":" 进程——资源分配的最小单位，线程——程序执行的最小单位 简介 进程（Process） 进程的目的就是担当分配系统资源（CPU时间、内存等）的基本单位。 线程（thread） 线程是进程的一个执行流，是CPU调度和分派的基本单位，它是比进程更小的能独立运行的基本单位。 进程有独立...","link":"","photos":[],"count_time":{"symbolsCount":"2.4k","symbolsTime":"2 mins."},"categories":[{"name":"Python","slug":"Python","count":12,"path":"api/categories/Python.json"}],"tags":[{"name":"Python面试题","slug":"Python面试题","count":18,"path":"api/tags/Python面试题.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%AE%80%E4%BB%8B\"><span class=\"toc-text\">简介</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%BF%9B%E7%A8%8B%E7%9A%84%E7%8A%B6%E6%80%81%E5%8F%8A%E8%BD%AC%E6%8D%A2\"><span class=\"toc-text\">进程的状态及转换</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%BA%BF%E7%A8%8B\"><span class=\"toc-text\">线程</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E4%BD%BF%E7%94%A8%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9A%84%E7%90%86%E7%94%B1%EF%BC%9A\"><span class=\"toc-text\">使用多线程的理由：</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%BA%BF%E7%A8%8B%E5%92%8C%E8%BF%9B%E7%A8%8B%E7%9A%84%E6%AF%94%E8%BE%83\"><span class=\"toc-text\">线程和进程的比较</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8F%82%E8%80%83%E6%96%87%E7%AB%A0\"><span class=\"toc-text\">参考文章</span></a></li></ol>","author":{"name":"Dongbo Xie","slug":"blog-author","avatar":"https://images-1257166372.cos.ap-shanghai.myqcloud.com/hexo/avator.png","link":"/","description":"准备开始，记录自己所有的操作吧!","socials":{"github":"https://github.com/Dongbox","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/5412853900","zhihu":"","csdn":"https://blog.csdn.net/dongbox_","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"剑指Offer-30：包含min函数的栈","uid":"cec078924c15a69261a840497da55575","slug":"Algorithm/剑指Offer-30：包含min函数的栈","date":"2022-12-19T06:07:01.000Z","updated":"2022-12-19T07:27:57.995Z","comments":true,"path":"api/articles/Algorithm/剑指Offer-30：包含min函数的栈.json","keywords":null,"cover":"https://images.unsplash.com/photo-1667747501985-40fa56e5cebc","text":"问题：剑指 Offer 30. 包含min函数的栈 - 力扣（Leetcode） 定义栈的数据结构，请在该类型中实现一个能够得到栈的最小元素的 min 函数在该栈中，调用 min、push 及 pop 的时间复杂度都是 O(1)。 # 示例 MinStack minStack =...","link":"","photos":[],"count_time":{"symbolsCount":"1.4k","symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"栈","slug":"栈","count":1,"path":"api/tags/栈.json"},{"name":"算法","slug":"算法","count":1,"path":"api/tags/算法.json"},{"name":"Leetcode","slug":"Leetcode","count":1,"path":"api/tags/Leetcode.json"}],"author":{"name":"Dongbo Xie","slug":"blog-author","avatar":"https://images-1257166372.cos.ap-shanghai.myqcloud.com/hexo/avator.png","link":"/","description":"准备开始，记录自己所有的操作吧!","socials":{"github":"https://github.com/Dongbox","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/5412853900","zhihu":"","csdn":"https://blog.csdn.net/dongbox_","juejin":"","customs":{}}},"feature":true},"next_post":{"title":"Python: Django Model中的F&Q","uid":"f66713f2a78be6074d97eaab35246620","slug":"Python：Django-Model中的F-Q","date":"2022-12-13T14:47:48.000Z","updated":"2022-12-13T14:55:08.080Z","comments":true,"path":"api/articles/Python：Django-Model中的F-Q.json","keywords":null,"cover":"https://images.unsplash.com/photo-1669045236900-9988510e0e69","text":"关于FF作用：操作数据表中的某列值，也就是数据库中的某个字段，F()允许Django在未实际链接数据的情况下具有对数据库字段的值的引用，不用获取对象放在内存中再对字段进行操作，直接执行原生产sql语句操作 使用场景：对数据库中的所有的商品，在原价格的基础上涨价10元 from d...","link":"","photos":[],"count_time":{"symbolsCount":510,"symbolsTime":"1 mins."},"categories":[{"name":"Python","slug":"Python","count":12,"path":"api/categories/Python.json"}],"tags":[{"name":"Python面试题","slug":"Python面试题","count":18,"path":"api/tags/Python面试题.json"},{"name":"Django","slug":"Django","count":4,"path":"api/tags/Django.json"}],"author":{"name":"Dongbo Xie","slug":"blog-author","avatar":"https://images-1257166372.cos.ap-shanghai.myqcloud.com/hexo/avator.png","link":"/","description":"准备开始，记录自己所有的操作吧!","socials":{"github":"https://github.com/Dongbox","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/5412853900","zhihu":"","csdn":"https://blog.csdn.net/dongbox_","juejin":"","customs":{}}},"feature":true}}