{"title":"剑指Offer-04：二维数组中的查找","uid":"e5e2148adfe0122b920f670391f658d9","slug":"Algorithm/剑指Offer-04：二维数组中的查找","date":"2022-12-20T01:01:53.000Z","updated":"2022-12-20T01:07:45.820Z","comments":true,"path":"api/articles/Algorithm/剑指Offer-04：二维数组中的查找.json","keywords":null,"cover":"https://images.unsplash.com/photo-1664877705363-984a353c0438","content":"<h3 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h3><p><a href=\"https://leetcode.cn/problems/er-wei-shu-zu-zhong-de-cha-zhao-lcof/description/\">剑指 Offer 04. 二维数组中的查找 - 力扣（Leetcode）</a></p>\n<p>在一个 n * m 的二维数组中，每一行都按照从左到右 <strong>非递减</strong> 的顺序排序，每一列都按照从上到下 <strong>非递减</strong> 的顺序排序。请完成一个高效的函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># 示例</span>\n现有矩阵 matrix 如下：\n<span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>   <span class=\"token number\">4</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token number\">15</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span>   <span class=\"token number\">5</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token number\">19</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span>   <span class=\"token number\">6</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">,</span> <span class=\"token number\">22</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">13</span><span class=\"token punctuation\">,</span> <span class=\"token number\">14</span><span class=\"token punctuation\">,</span> <span class=\"token number\">17</span><span class=\"token punctuation\">,</span> <span class=\"token number\">24</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span><span class=\"token number\">18</span><span class=\"token punctuation\">,</span> <span class=\"token number\">21</span><span class=\"token punctuation\">,</span> <span class=\"token number\">23</span><span class=\"token punctuation\">,</span> <span class=\"token number\">26</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">]</span>\n\n给定 target <span class=\"token operator\">=</span> <span class=\"token number\">5</span>，返回 true。\n给定 target <span class=\"token operator\">=</span> <span class=\"token number\">20</span>，返回 false。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n\n\n<h3 id=\"方法：利用二叉树结构\"><a href=\"#方法：利用二叉树结构\" class=\"headerlink\" title=\"方法：利用二叉树结构\"></a>方法：利用二叉树结构</h3><p>我们将矩阵逆时针旋转 45° ，并将其转化为图形式，发现其类似于 <strong>二叉搜索树</strong> ，即对于每个元素，其左分支元素更小、右分支元素更大。</p>\n<p><img src=\"https://images-1257166372.cos.ap-shanghai.myqcloud.com/hexo/6584ea93812d27112043d203ea90e4b0950117d45e0452d0c630fcb247fbc4af-Picture1.png\" alt=\"Picture1.png\"></p>\n<p>“根节点” 对应的是矩阵的 “左下角” 和 “右上角” 元素，本文称之为 标志数 ，以 <code>matrix</code> 中的 左下角元素 为标志数 <code>flag</code> ，则有:</p>\n<p>若 <code>flag &gt; target</code> ，则 <code>target</code> 一定在 <code>flag</code> 所在 行的上方 ，即 <code>flag</code> 所在行可被消去。<br>若 <code>flag &lt; target</code> ，则 <code>target</code> 一定在 <code>flag</code> 所在 列的右方 ，即 <code>flag</code> 所在列可被消去。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">findNumberIn2DArray</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> matrix<span class=\"token punctuation\">:</span> List<span class=\"token punctuation\">[</span>List<span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">bool</span><span class=\"token punctuation\">:</span>\n        i<span class=\"token punctuation\">,</span> j <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>matrix<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span>\n        <span class=\"token keyword\">while</span> i <span class=\"token operator\">>=</span> <span class=\"token number\">0</span> <span class=\"token keyword\">and</span> j <span class=\"token operator\">&lt;</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>matrix<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> matrix<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> target<span class=\"token punctuation\">:</span> i <span class=\"token operator\">-=</span> <span class=\"token number\">1</span>  <span class=\"token comment\"># 执行 i-- ，即消去第 i 行元素</span>\n            <span class=\"token keyword\">elif</span> matrix<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> target<span class=\"token punctuation\">:</span> j <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>  <span class=\"token comment\"># 执行 j++ ，即消去第 j 列元素</span>\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">True</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h3 id=\"复杂度分析\"><a href=\"#复杂度分析\" class=\"headerlink\" title=\"复杂度分析\"></a>复杂度分析</h3><p>时间复杂度 <em>O(M+N)<em>：其中，</em>N</em> 和 <em>M</em> 分别为矩阵行数和列数，此算法最多循环 <em>M+N</em> 次。<br>空间复杂度 <em>O(1)</em>: <em>i</em>, <em>j</em> 指针使用常数大小额外空间。</p>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><ul>\n<li><a href=\"https://leetcode.cn/problems/er-wei-shu-zu-zhong-de-cha-zhao-lcof/solutions/95306/mian-shi-ti-04-er-wei-shu-zu-zhong-de-cha-zhao-zuo/\">剑指 Offer 04. 二维数组中的查找 - 力扣（Leetcode）</a></li>\n</ul>\n","feature":true,"text":"问题剑指 Offer 04. 二维数组中的查找 - 力扣（Leetcode） 在一个 n * m 的二维数组中，每一行都按照从左到右 非递减 的顺序排序，每一列都按照从上到下 非递减 的顺序排序。请完成一个高效的函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。 ...","link":"","photos":[],"count_time":{"symbolsCount":"1.1k","symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"Algorithm","slug":"Algorithm","count":10,"path":"api/tags/Algorithm.json"},{"name":"Leetcode","slug":"Leetcode","count":10,"path":"api/tags/Leetcode.json"},{"name":"查找算法","slug":"查找算法","count":5,"path":"api/tags/查找算法.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%97%AE%E9%A2%98\"><span class=\"toc-text\">问题</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%96%B9%E6%B3%95%EF%BC%9A%E5%88%A9%E7%94%A8%E4%BA%8C%E5%8F%89%E6%A0%91%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">方法：利用二叉树结构</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90\"><span class=\"toc-text\">复杂度分析</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8F%82%E8%80%83\"><span class=\"toc-text\">参考</span></a></li></ol>","author":{"name":"Dongbo Xie","slug":"blog-author","avatar":"https://images-1257166372.cos.ap-shanghai.myqcloud.com/hexo/avator.png","link":"/","description":"虚心学习，用心爱人~","socials":{"github":"https://github.com/Dongbox","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/5412853900","zhihu":"","csdn":"https://blog.csdn.net/dongbox_","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"剑指Offer-11：旋转数组的最小数字","uid":"90b1ec3d38561ac8554926b985f123c0","slug":"Algorithm/剑指Offer-11：旋转数组的最小数字","date":"2022-12-20T02:33:53.000Z","updated":"2022-12-20T02:46:35.223Z","comments":true,"path":"api/articles/Algorithm/剑指Offer-11：旋转数组的最小数字.json","keywords":null,"cover":"https://images.unsplash.com/photo-1671479754018-9fbcb053d608","text":"问题剑指 Offer 11. 旋转数组的最小数字 - 力扣（Leetcode） 把一个数组最开始的若干个元素搬到数组的末尾，我们称之为数组的旋转。 给你一个可能存在 重复 元素值的数组 numbers ，它原来是一个升序排列的数组，并按上述情形进行了一次旋转。请返回旋转数组的最小...","link":"","photos":[],"count_time":{"symbolsCount":"1.4k","symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"Algorithm","slug":"Algorithm","count":10,"path":"api/tags/Algorithm.json"},{"name":"Leetcode","slug":"Leetcode","count":10,"path":"api/tags/Leetcode.json"},{"name":"查找算法","slug":"查找算法","count":5,"path":"api/tags/查找算法.json"}],"author":{"name":"Dongbo Xie","slug":"blog-author","avatar":"https://images-1257166372.cos.ap-shanghai.myqcloud.com/hexo/avator.png","link":"/","description":"虚心学习，用心爱人~","socials":{"github":"https://github.com/Dongbox","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/5412853900","zhihu":"","csdn":"https://blog.csdn.net/dongbox_","juejin":"","customs":{}}},"feature":true},"next_post":{"title":"剑指Offer-53：0~n中缺失的数字","uid":"7cc307c78d4102bf1aeeccbd33b5d357","slug":"Algorithm/剑指Offer-53：0-n中缺失的数字","date":"2022-12-19T13:26:25.000Z","updated":"2022-12-19T13:34:41.507Z","comments":true,"path":"api/articles/Algorithm/剑指Offer-53：0-n中缺失的数字.json","keywords":null,"cover":"https://images.unsplash.com/photo-1657444984080-5c08464bde8c","text":"问题剑指 Offer 53 - II. 0～n-1中缺失的数字 - 力扣（Leetcode） 一个长度为n-1的递增排序数组中的所有数字都是唯一的，并且每个数字都在范围0～n-1之内。在范围0～n-1内的n个数字中有且只有一个数字不在该数组中，请找出这个数字。 # 示例 输入: ...","link":"","photos":[],"count_time":{"symbolsCount":724,"symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"Algorithm","slug":"Algorithm","count":10,"path":"api/tags/Algorithm.json"},{"name":"Leetcode","slug":"Leetcode","count":10,"path":"api/tags/Leetcode.json"},{"name":"查找算法","slug":"查找算法","count":5,"path":"api/tags/查找算法.json"}],"author":{"name":"Dongbo Xie","slug":"blog-author","avatar":"https://images-1257166372.cos.ap-shanghai.myqcloud.com/hexo/avator.png","link":"/","description":"虚心学习，用心爱人~","socials":{"github":"https://github.com/Dongbox","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/5412853900","zhihu":"","csdn":"https://blog.csdn.net/dongbox_","juejin":"","customs":{}}}}}