{"title":"剑指Offer-06：从尾到头打印链表","uid":"c8c4451151af101d353c3e3bce84b1fa","slug":"Algorithm/剑指Offer-06：从尾到头打印链表","date":"2022-12-19T08:03:03.000Z","updated":"2022-12-19T08:24:41.532Z","comments":true,"path":"api/articles/Algorithm/剑指Offer-06：从尾到头打印链表.json","keywords":null,"cover":null,"content":"<h3 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h3><p><a href=\"https://leetcode.cn/problems/cong-wei-dao-tou-da-yin-lian-biao-lcof/description/\">剑指 Offer 06. 从尾到头打印链表 - 力扣（Leetcode）</a></p>\n<p>输入一个链表的头节点，从尾到头反过来返回每个节点的值（用数组返回）。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># 示例</span>\n输入：head <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span>\n输出：<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"方法：辅助栈法\"><a href=\"#方法：辅助栈法\" class=\"headerlink\" title=\"方法：辅助栈法\"></a>方法：辅助栈法</h3><h4 id=\"算法流程：\"><a href=\"#算法流程：\" class=\"headerlink\" title=\"算法流程：\"></a>算法流程：</h4><ul>\n<li>入栈： 遍历链表，将各节点值 push 入栈。（Python 使用 append() 方法，Java借助 LinkedList 的addLast()方法）。</li>\n<li>出栈： 将各节点值 pop 出栈，存储于数组并返回。（Python 直接返回 stack 的倒序列表，Java 新建一个数组，通过 popLast() 方法将各元素存入数组，实现倒序输出）。</li>\n</ul>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># Definition for singly-linked list.</span>\n<span class=\"token comment\"># class ListNode:</span>\n<span class=\"token comment\">#     def __init__(self, x):</span>\n<span class=\"token comment\">#         self.val = x</span>\n<span class=\"token comment\">#         self.next = None</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">reversePrint</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> head<span class=\"token punctuation\">:</span> ListNode<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> List<span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n        stack <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">while</span> head<span class=\"token punctuation\">:</span>\n            stack<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>head<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span>\n            head <span class=\"token operator\">=</span> head<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n        <span class=\"token keyword\">return</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">reversed</span><span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># </span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"复杂度分析\"><a href=\"#复杂度分析\" class=\"headerlink\" title=\"复杂度分析\"></a>复杂度分析</h3><ul>\n<li>时间复杂度 *O(N)*： 入栈和出栈共使用 <em>O(N)</em> 时间。</li>\n<li>空间复杂度 *O(N)*： 辅助栈 <code>stack</code> 和数组 <code>res</code> 共使用 <em>O(N)</em> 的额外空间。</li>\n</ul>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><ul>\n<li><a href=\"https://blog.csdn.net/qq_34872215/article/details/88792996\">python——python中list.reverse()函数得到的结果为None_qq_34872215的博客-CSDN博客</a></li>\n<li><a href=\"https://leetcode.cn/problems/cong-wei-dao-tou-da-yin-lian-biao-lcof/solutions/97270/mian-shi-ti-06-cong-wei-dao-tou-da-yin-lian-biao-d/?languageTags=python3\">剑指 Offer 06. 从尾到头打印链表 - 力扣（Leetcode）</a></li>\n</ul>\n","text":"问题剑指 Offer 06. 从尾到头打印链表 - 力扣（Leetcode） 输入一个链表的头节点，从尾到头反过来返回每个节点的值（用数组返回）。 # 示例 输入：head = [1,3,2] 输出：[2,3,1] 方法：辅助栈法算法流程： 入栈： 遍历链表，将各节点值 push...","link":"","photos":[],"count_time":{"symbolsCount":843,"symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"链表","slug":"链表","count":2,"path":"api/tags/链表.json"},{"name":"Algorithm","slug":"Algorithm","count":9,"path":"api/tags/Algorithm.json"},{"name":"Leetcode","slug":"Leetcode","count":9,"path":"api/tags/Leetcode.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%97%AE%E9%A2%98\"><span class=\"toc-text\">问题</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%96%B9%E6%B3%95%EF%BC%9A%E8%BE%85%E5%8A%A9%E6%A0%88%E6%B3%95\"><span class=\"toc-text\">方法：辅助栈法</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%AE%97%E6%B3%95%E6%B5%81%E7%A8%8B%EF%BC%9A\"><span class=\"toc-text\">算法流程：</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90\"><span class=\"toc-text\">复杂度分析</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8F%82%E8%80%83\"><span class=\"toc-text\">参考</span></a></li></ol>","author":{"name":"Dongbo Xie","slug":"blog-author","avatar":"https://images-1257166372.cos.ap-shanghai.myqcloud.com/hexo/avator.png","link":"/","description":"虚心学习，用心爱人~","socials":{"github":"https://github.com/Dongbox","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/5412853900","zhihu":"","csdn":"https://blog.csdn.net/dongbox_","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"剑指Offer-24：反转链表","uid":"2c2b58e191552fd1e9252d2bfed9bbd7","slug":"Algorithm/剑指Offer-24：反转链表","date":"2022-12-19T08:56:24.000Z","updated":"2022-12-19T09:00:22.802Z","comments":true,"path":"api/articles/Algorithm/剑指Offer-24：反转链表.json","keywords":null,"cover":"https://images.unsplash.com/photo-1668076120526-41f1e4e20214","text":"问题剑指 Offer 24. 反转链表 - 力扣（Leetcode） 定义一个函数，输入一个链表的头节点，反转该链表并输出反转后链表的头节点。 # 示例 输入: 1->2->3->4->5->NULL 输出: 5->4->3->2->1->NULL 方法：temp暂存考虑遍历链表...","link":"","photos":[],"count_time":{"symbolsCount":726,"symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"链表","slug":"链表","count":2,"path":"api/tags/链表.json"},{"name":"Algorithm","slug":"Algorithm","count":9,"path":"api/tags/Algorithm.json"},{"name":"Leetcode","slug":"Leetcode","count":9,"path":"api/tags/Leetcode.json"}],"author":{"name":"Dongbo Xie","slug":"blog-author","avatar":"https://images-1257166372.cos.ap-shanghai.myqcloud.com/hexo/avator.png","link":"/","description":"虚心学习，用心爱人~","socials":{"github":"https://github.com/Dongbox","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/5412853900","zhihu":"","csdn":"https://blog.csdn.net/dongbox_","juejin":"","customs":{}}}},"next_post":{"title":"剑指Offer-30：包含min函数的栈","uid":"cec078924c15a69261a840497da55575","slug":"Algorithm/剑指Offer-30：包含min函数的栈","date":"2022-12-19T06:07:01.000Z","updated":"2022-12-19T08:59:55.573Z","comments":true,"path":"api/articles/Algorithm/剑指Offer-30：包含min函数的栈.json","keywords":null,"cover":"https://images.unsplash.com/photo-1667747501985-40fa56e5cebc","text":"问题：剑指 Offer 30. 包含min函数的栈 - 力扣（Leetcode） 定义栈的数据结构，请在该类型中实现一个能够得到栈的最小元素的 min 函数在该栈中，调用 min、push 及 pop 的时间复杂度都是 O(1)。 # 示例 MinStack minStack =...","link":"","photos":[],"count_time":{"symbolsCount":"1.4k","symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"Algorithm","slug":"Algorithm","count":9,"path":"api/tags/Algorithm.json"},{"name":"Leetcode","slug":"Leetcode","count":9,"path":"api/tags/Leetcode.json"},{"name":"栈","slug":"栈","count":2,"path":"api/tags/栈.json"}],"author":{"name":"Dongbo Xie","slug":"blog-author","avatar":"https://images-1257166372.cos.ap-shanghai.myqcloud.com/hexo/avator.png","link":"/","description":"虚心学习，用心爱人~","socials":{"github":"https://github.com/Dongbox","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/5412853900","zhihu":"","csdn":"https://blog.csdn.net/dongbox_","juejin":"","customs":{}}}}}